"""
Testes unit√°rios para o m√≥dulo Usuario

Este arquivo cont√©m todos os testes especificados no documento para o m√≥dulo Usuario.
Os testes seguem exatamente as especifica√ß√µes fornecidas.

Testes implementados (conforme especifica√ß√£o):
1. Cria√ß√£o de usu√°rio com nome e e-mail v√°lidos
2. Cria√ß√£o com e-mail nulo
3. Cria√ß√£o com nome nulo
4. Modifica√ß√£o de e-mail v√°lida
5. Modifica√ß√£o com e-mail nulo
6. Consulta de nome e e-mail ap√≥s cria√ß√£o
7. Destrui√ß√£o de usu√°rio
"""

import unittest
import sys
import os

# Adiciona o diret√≥rio pai ao path para importar os m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from modules.usuario import (
    usuario_criar, usuario_destruir, usuario_set_email,
    usuario_get_nome, usuario_get_email
)

def test_01_criacao_usuario_valido():
    """
    Teste 1: Cria√ß√£o de usu√°rio com nome e e-mail v√°lidos
    
    Conforme especifica√ß√£o:
    Entrada: strings n√£o nulas ou vazias para nome e e-mail
    Esperado: ponteiro n√£o nulo; fun√ß√µes de acesso (usuario_get_nome,
    usuario_get_email) retornam os valores corretos
    """
    # Dados de teste
    nome = "Jo√£o Silva"
    email = "joao.silva@email.com"
    
    # Executa a opera√ß√£o
    usuario = usuario_criar(nome, email)
    
    # Verifica√ß√µes
    assert usuario is not None, "Usuario deve ser criado com sucesso"
    assert usuario_get_nome(usuario) == nome, "Nome deve ser retornado corretamente"
    assert usuario_get_email(usuario) == email.lower(), "Email deve ser retornado corretamente"
    
    # Limpeza
    usuario_destruir(usuario)

def test_02_criacao_email_nulo():
    """
    Teste 2: Cria√ß√£o com e-mail nulo
    
    Conforme especifica√ß√£o:
    Entrada: nome v√°lido; e-mail nulo
    Esperado: retorno NULL
    """
    # Dados de teste
    nome = "Jo√£o Silva"
    email = None
    
    # Executa a opera√ß√£o
    usuario = usuario_criar(nome, email)
    
    # Verifica√ß√µes
    assert usuario is None, "Usuario n√£o deve ser criado com email nulo"

def test_03_criacao_nome_nulo():
    """
    Teste 3: Cria√ß√£o com nome nulo
    
    Conforme especifica√ß√£o:
    Entrada: nome nulo; e-mail v√°lido
    Esperado: retorno NULL
    """
    # Dados de teste
    nome = None
    email = "joao.silva@email.com"
    
    # Executa a opera√ß√£o
    usuario = usuario_criar(nome, email)
    
    # Verifica√ß√µes
    assert usuario is None, "Usuario n√£o deve ser criado com nome nulo"

def test_04_modificacao_email_valida():
    """
    Teste 4: Modifica√ß√£o de e-mail v√°lida
    
    Conforme especifica√ß√£o:
    Entrada: ponteiro para usu√°rio v√°lido; string n√£o nula para novo e-mail
    Esperado: retorno 0; usuario_get_email retorna o novo e-mail
    """
    # Prepara√ß√£o
    nome = "Jo√£o Silva"
    email_inicial = "joao.silva@email.com"
    novo_email = "joao.novo@email.com"
    
    usuario = usuario_criar(nome, email_inicial)
    assert usuario is not None, "Usuario deve ser criado para o teste"
    
    # Executa a opera√ß√£o
    resultado = usuario_set_email(usuario, novo_email)
    
    # Verifica√ß√µes
    assert resultado == 0, "Modifica√ß√£o deve retornar sucesso (0)"
    assert usuario_get_email(usuario) == novo_email.lower(), "Email deve ser atualizado"
    
    # Limpeza
    usuario_destruir(usuario)

def test_05_modificacao_email_nulo():
    """
    Teste 5: Modifica√ß√£o com e-mail nulo
    
    Conforme especifica√ß√£o:
    Entrada: ponteiro para usu√°rio v√°lido; novo e-mail nulo
    Esperado: retorno -1
    """
    # Prepara√ß√£o
    nome = "Jo√£o Silva"
    email_inicial = "joao.silva@email.com"
    novo_email = None
    
    usuario = usuario_criar(nome, email_inicial)
    assert usuario is not None, "Usuario deve ser criado para o teste"
    
    # Executa a opera√ß√£o
    resultado = usuario_set_email(usuario, novo_email)
    
    # Verifica√ß√µes
    assert resultado == -1, "Modifica√ß√£o deve retornar erro (-1)"
    assert usuario_get_email(usuario) == email_inicial.lower(), "Email n√£o deve ser alterado"
    
    # Limpeza
    usuario_destruir(usuario)

def test_06_consulta_nome_email_apos_criacao():
    """
    Teste 6: Consulta de nome e e-mail ap√≥s cria√ß√£o
    
    Conforme especifica√ß√£o:
    Entrada: ponteiro para usu√°rio criado anteriormente
    Esperado: fun√ß√µes de acesso retornam os dados consistentes com os
    fornecidos na cria√ß√£o
    """
    # Dados de teste
    nome = "Maria Santos"
    email = "maria.santos@email.com"
    
    # Executa a opera√ß√£o
    usuario = usuario_criar(nome, email)
    assert usuario is not None, "Usuario deve ser criado"
    
    # Verifica√ß√µes
    nome_retornado = usuario_get_nome(usuario)
    email_retornado = usuario_get_email(usuario)
    
    assert nome_retornado == nome, "Nome deve ser consistente"
    assert email_retornado == email.lower(), "Email deve ser consistente"
    assert nome_retornado is not None, "Nome n√£o deve ser nulo"
    assert email_retornado is not None, "Email n√£o deve ser nulo"
    
    # Limpeza
    usuario_destruir(usuario)

def test_07_destruicao_usuario():
    """
    Teste 7: Destrui√ß√£o de usu√°rio
    
    Conforme especifica√ß√£o:
    Entrada: ponteiro para usu√°rio v√°lido
    Esperado: mem√≥ria liberada com sucesso; ponteiro n√£o deve ser utilizado ap√≥s
    a destrui√ß√£o
    """
    # Prepara√ß√£o
    nome = "Carlos Oliveira"
    email = "carlos.oliveira@email.com"
    
    usuario = usuario_criar(nome, email)
    assert usuario is not None, "Usuario deve ser criado"
    
    # Executa a opera√ß√£o
    usuario_destruir(usuario)
    
    # Verifica√ß√£o: Em Python, n√£o podemos verificar diretamente a libera√ß√£o de mem√≥ria,
    # mas podemos verificar que a fun√ß√£o n√£o gera exce√ß√µes
    # O teste passa se chegou at√© aqui sem exce√ß√µes
    assert True, "Destrui√ß√£o executada sem exce√ß√µes"

def test_08_casos_limite_nome_vazio():
    """
    Teste 8: Casos limite - nome vazio
    """
    # Teste com nome vazio
    usuario = usuario_criar("", "teste@email.com")
    assert usuario is None, "Usuario n√£o deve ser criado com nome vazio"

def test_09_casos_limite_email_vazio():
    """
    Teste 9: Casos limite - email vazio
    """
    # Teste com email vazio
    usuario = usuario_criar("Jo√£o Silva", "")
    assert usuario is None, "Usuario n√£o deve ser criado com email vazio"

def test_10_casos_limite_email_invalido():
    """
    Teste 10: Casos limite - email inv√°lido
    """
    # Teste com email inv√°lido (sem @)
    usuario = usuario_criar("Jo√£o Silva", "emailinvalido")
    assert usuario is None, "Usuario n√£o deve ser criado com email inv√°lido"

def test_11_modificacao_usuario_nulo():
    """
    Teste 11: Modifica√ß√£o de email com usu√°rio nulo
    """
    # Executa a opera√ß√£o
    resultado = usuario_set_email(None, "novo@email.com")
    
    # Verifica√ß√µes
    assert resultado == -1, "Modifica√ß√£o deve retornar erro (-1) com usu√°rio nulo"

def test_12_consulta_usuario_nulo():
    """
    Teste 12: Consulta de dados com usu√°rio nulo
    """
    # Executa as opera√ß√µes
    nome = usuario_get_nome(None)
    email = usuario_get_email(None)
    
    # Verifica√ß√µes
    assert nome is None, "Nome deve ser None para usu√°rio nulo"
    assert email is None, "Email deve ser None para usu√°rio nulo"

# Lista de todos os testes para execu√ß√£o
def run_all_tests():
    """
    Executa todos os testes do m√≥dulo
    """
    tests = [
        test_01_criacao_usuario_valido,
        test_02_criacao_email_nulo,
        test_03_criacao_nome_nulo,
        test_04_modificacao_email_valida,
        test_05_modificacao_email_nulo,
        test_06_consulta_nome_email_apos_criacao,
        test_07_destruicao_usuario,
        test_08_casos_limite_nome_vazio,
        test_09_casos_limite_email_vazio,
        test_10_casos_limite_email_invalido,
        test_11_modificacao_usuario_nulo,
        test_12_consulta_usuario_nulo
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            test()
            print(f"‚úÖ {test.__name__}: PASSED")
            passed += 1
        except Exception as e:
            print(f"‚ùå {test.__name__}: FAILED - {str(e)}")
            failed += 1
    
    print(f"\nüìä RESULTADOS: {passed} passed, {failed} failed")
    return failed == 0

if __name__ == '__main__':
    success = run_all_tests()
    exit(0 if success else 1)

