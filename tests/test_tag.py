"""
Testes unit√°rios para o m√≥dulo Tag

Este arquivo cont√©m todos os testes especificados no documento para o m√≥dulo Tag.
Os testes seguem exatamente as especifica√ß√µes fornecidas.

Testes implementados (conforme especifica√ß√£o):
1. Cria√ß√£o de tag com nome e cor v√°lidos
2. Cria√ß√£o com nome nulo
3. Cria√ß√£o com cor nula
4. Altera√ß√£o de nome v√°lida
5. Altera√ß√£o de nome nula
6. Altera√ß√£o de cor v√°lida
7. Altera√ß√£o de cor nula
8. Consulta de nome e cor ap√≥s cria√ß√£o
9. Destrui√ß√£o da tag
"""

import unittest
import sys
import os

# Adiciona o diret√≥rio pai ao path para importar os m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from modules.tag import (
    tag_criar, tag_destruir, tag_set_nome, tag_set_cor,
    tag_get_nome, tag_get_cor
)

def test_01_criacao_tag_valida():
    """
    Teste 1: Cria√ß√£o de tag com nome e cor v√°lidos
    
    Conforme especifica√ß√£o:
    Entrada: strings n√£o nulas e n√£o vazias para nome e cor hexadecimal
    Esperado: ponteiro n√£o nulo; fun√ß√µes de acesso retornam os valores corretos
    """
    # Dados de teste
    nome = "Urgente"
    cor = "#FF0000"
    
    # Executa a opera√ß√£o
    tag = tag_criar(nome, cor)
    
    # Verifica√ß√µes
    assert tag is not None, "Tag deve ser criada com sucesso"
    assert tag_get_nome(tag) == nome, "Nome deve ser retornado corretamente"
    assert tag_get_cor(tag) == cor.upper(), "Cor deve ser retornada corretamente"
    
    # Limpeza
    tag_destruir(tag)

def test_02_criacao_nome_nulo():
    """
    Teste 2: Cria√ß√£o com nome nulo
    
    Conforme especifica√ß√£o:
    Entrada: nome nulo, cor v√°lida
    Esperado: retorno NULL
    """
    # Dados de teste
    nome = None
    cor = "#FF0000"
    
    # Executa a opera√ß√£o
    tag = tag_criar(nome, cor)
    
    # Verifica√ß√µes
    assert tag is None, "Tag n√£o deve ser criada com nome nulo"

def test_03_criacao_cor_nula():
    """
    Teste 3: Cria√ß√£o com cor nula
    
    Conforme especifica√ß√£o:
    Entrada: nome v√°lido, cor nula
    Esperado: retorno NULL
    """
    # Dados de teste
    nome = "Urgente"
    cor = None
    
    # Executa a opera√ß√£o
    tag = tag_criar(nome, cor)
    
    # Verifica√ß√µes
    assert tag is None, "Tag n√£o deve ser criada com cor nula"

def test_04_alteracao_nome_valida():
    """
    Teste 4: Altera√ß√£o de nome v√°lida
    
    Conforme especifica√ß√£o:
    Entrada: ponteiro para tag v√°lida e novo nome n√£o nulo
    Esperado: retorno 0; tag_get_nome retorna o novo nome
    """
    # Prepara√ß√£o
    nome_inicial = "Urgente"
    novo_nome = "Muito Urgente"
    cor = "#FF0000"
    
    tag = tag_criar(nome_inicial, cor)
    assert tag is not None, "Tag deve ser criada para o teste"
    
    # Executa a opera√ß√£o
    resultado = tag_set_nome(tag, novo_nome)
    
    # Verifica√ß√µes
    assert resultado == 0, "Altera√ß√£o deve retornar sucesso (0)"
    assert tag_get_nome(tag) == novo_nome, "Nome deve ser atualizado"
    
    # Limpeza
    tag_destruir(tag)

def test_05_alteracao_nome_nula():
    """
    Teste 5: Altera√ß√£o de nome nula
    
    Conforme especifica√ß√£o:
    Entrada: ponteiro para tag v√°lida, novo nome nulo
    Esperado: retorno -1
    """
    # Prepara√ß√£o
    nome_inicial = "Urgente"
    novo_nome = None
    cor = "#FF0000"
    
    tag = tag_criar(nome_inicial, cor)
    assert tag is not None, "Tag deve ser criada para o teste"
    
    # Executa a opera√ß√£o
    resultado = tag_set_nome(tag, novo_nome)
    
    # Verifica√ß√µes
    assert resultado == -1, "Altera√ß√£o deve retornar erro (-1)"
    assert tag_get_nome(tag) == nome_inicial, "Nome n√£o deve ser alterado"
    
    # Limpeza
    tag_destruir(tag)

def test_06_alteracao_cor_valida():
    """
    Teste 6: Altera√ß√£o de cor v√°lida
    
    Conforme especifica√ß√£o:
    Entrada: ponteiro para tag v√°lida e nova cor no formato "#RRGGBB"
    Esperado: retorno 0; tag_get_cor retorna a nova cor
    """
    # Prepara√ß√£o
    nome = "Urgente"
    cor_inicial = "#FF0000"
    nova_cor = "#00FF00"
    
    tag = tag_criar(nome, cor_inicial)
    assert tag is not None, "Tag deve ser criada para o teste"
    
    # Executa a opera√ß√£o
    resultado = tag_set_cor(tag, nova_cor)
    
    # Verifica√ß√µes
    assert resultado == 0, "Altera√ß√£o deve retornar sucesso (0)"
    assert tag_get_cor(tag) == nova_cor.upper(), "Cor deve ser atualizada"
    
    # Limpeza
    tag_destruir(tag)

def test_07_alteracao_cor_nula():
    """
    Teste 7: Altera√ß√£o de cor nula
    
    Conforme especifica√ß√£o:
    Entrada: ponteiro para tag v√°lida, nova cor nula
    Esperado: retorno -1
    """
    # Prepara√ß√£o
    nome = "Urgente"
    cor_inicial = "#FF0000"
    nova_cor = None
    
    tag = tag_criar(nome, cor_inicial)
    assert tag is not None, "Tag deve ser criada para o teste"
    
    # Executa a opera√ß√£o
    resultado = tag_set_cor(tag, nova_cor)
    
    # Verifica√ß√µes
    assert resultado == -1, "Altera√ß√£o deve retornar erro (-1)"
    assert tag_get_cor(tag) == cor_inicial.upper(), "Cor n√£o deve ser alterada"
    
    # Limpeza
    tag_destruir(tag)

def test_08_consulta_nome_cor_apos_criacao():
    """
    Teste 8: Consulta de nome e cor ap√≥s cria√ß√£o
    
    Conforme especifica√ß√£o:
    Entrada: ponteiro para tag criada anteriormente
    Esperado: fun√ß√µes de acesso retornam os dados consistentes com os
    fornecidos na cria√ß√£o
    """
    # Dados de teste
    nome = "Importante"
    cor = "#00FF00"
    
    # Executa a opera√ß√£o
    tag = tag_criar(nome, cor)
    assert tag is not None, "Tag deve ser criada"
    
    # Verifica√ß√µes
    nome_retornado = tag_get_nome(tag)
    cor_retornada = tag_get_cor(tag)
    
    assert nome_retornado == nome, "Nome deve ser consistente"
    assert cor_retornada == cor.upper(), "Cor deve ser consistente"
    assert nome_retornado is not None, "Nome n√£o deve ser nulo"
    assert cor_retornada is not None, "Cor n√£o deve ser nula"
    
    # Limpeza
    tag_destruir(tag)

def test_09_destruicao_tag():
    """
    Teste 9: Destrui√ß√£o da tag
    
    Conforme especifica√ß√£o:
    Entrada: ponteiro para tag v√°lida
    Esperado: mem√≥ria liberada com sucesso; ponteiro n√£o deve ser utilizado ap√≥s
    a destrui√ß√£o
    """
    # Prepara√ß√£o
    nome = "Bug"
    cor = "#0000FF"
    
    tag = tag_criar(nome, cor)
    assert tag is not None, "Tag deve ser criada"
    
    # Executa a opera√ß√£o
    tag_destruir(tag)
    
    # Verifica√ß√£o: Em Python, n√£o podemos verificar diretamente a libera√ß√£o de mem√≥ria,
    # mas podemos verificar que a fun√ß√£o n√£o gera exce√ß√µes
    # O teste passa se chegou at√© aqui sem exce√ß√µes
    assert True, "Destrui√ß√£o executada sem exce√ß√µes"

def test_10_casos_limite_nome_vazio():
    """
    Teste 10: Casos limite - nome vazio
    """
    # Teste com nome vazio
    tag = tag_criar("", "#FF0000")
    assert tag is None, "Tag n√£o deve ser criada com nome vazio"

def test_11_casos_limite_cor_invalida():
    """
    Teste 11: Casos limite - cor inv√°lida
    """
    # Teste com cor inv√°lida (sem #)
    tag = tag_criar("Urgente", "FF0000")
    assert tag is None, "Tag n√£o deve ser criada com cor inv√°lida"

def test_12_casos_limite_cor_formato_errado():
    """
    Teste 12: Casos limite - formato de cor errado
    """
    # Teste com formato de cor errado
    tag = tag_criar("Urgente", "#GG0000")
    assert tag is None, "Tag n√£o deve ser criada com formato de cor errado"

def test_13_alteracao_tag_nula():
    """
    Teste 13: Altera√ß√£o de nome com tag nula
    """
    # Executa a opera√ß√£o
    resultado = tag_set_nome(None, "Novo Nome")
    
    # Verifica√ß√µes
    assert resultado == -1, "Altera√ß√£o deve retornar erro (-1) com tag nula"

def test_14_consulta_tag_nula():
    """
    Teste 14: Consulta de dados com tag nula
    """
    # Executa as opera√ß√µes
    nome = tag_get_nome(None)
    cor = tag_get_cor(None)
    
    # Verifica√ß√µes
    assert nome is None, "Nome deve ser None para tag nula"
    assert cor is None, "Cor deve ser None para tag nula"

def test_15_cores_hexadecimais_validas():
    """
    Teste 15: Testa diferentes cores hexadecimais v√°lidas
    """
    cores_validas = [
        "#FF0000",  # Vermelho
        "#00FF00",  # Verde
        "#0000FF",  # Azul
        "#FFFF00",  # Amarelo
        "#FF00FF",  # Magenta
        "#00FFFF",  # Ciano
        "#000000",  # Preto
        "#FFFFFF"   # Branco
    ]
    
    for cor in cores_validas:
        tag = tag_criar(f"Tag {cor}", cor)
        assert tag is not None, f"Tag deve ser criada com cor {cor}"
        assert tag_get_cor(tag) == cor.upper(), f"Cor deve ser {cor.upper()}"
        tag_destruir(tag)

# Lista de todos os testes para execu√ß√£o
def run_all_tests():
    """
    Executa todos os testes do m√≥dulo
    """
    tests = [
        test_01_criacao_tag_valida,
        test_02_criacao_nome_nulo,
        test_03_criacao_cor_nula,
        test_04_alteracao_nome_valida,
        test_05_alteracao_nome_nula,
        test_06_alteracao_cor_valida,
        test_07_alteracao_cor_nula,
        test_08_consulta_nome_cor_apos_criacao,
        test_09_destruicao_tag,
        test_10_casos_limite_nome_vazio,
        test_11_casos_limite_cor_invalida,
        test_12_casos_limite_cor_formato_errado,
        test_13_alteracao_tag_nula,
        test_14_consulta_tag_nula,
        test_15_cores_hexadecimais_validas
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            test()
            print(f"‚úÖ {test.__name__}: PASSED")
            passed += 1
        except Exception as e:
            print(f"‚ùå {test.__name__}: FAILED - {str(e)}")
            failed += 1
    
    print(f"\nüìä RESULTADOS: {passed} passed, {failed} failed")
    return failed == 0

if __name__ == '__main__':
    success = run_all_tests()
    exit(0 if success else 1)

